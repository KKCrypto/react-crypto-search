{"version":3,"sources":["components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","useState","coins","setCoins","modalInfo","setModalInfo","setShowModal","show","setShow","handleClose","handleShow","getCoinData","a","axios","get","data","console","log","useEffect","columns","dataField","text","sort","headerStyle","width","align","filter","textFilter","placeholder","rowEvents","onClick","e","row","toggleTrueFalse","ModalContent","Modal","onHide","Header","closeButton","style","quotes","USD","percent_change_24h","background","Title","name","Body","beta_value","circulating_supply","last_updated","max_supply","rank","symbol","total_supply","Footer","Button","variant","minHeight","display","flexDirection","justifyContent","alignItems","keyField","pagination","paginationFactory","defaultSorted","order","filterFactory","rowStyle","rowIndex","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0790512e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport BootStrapTable from 'react-bootstrap-table-next'\r\nimport paginationFactory from 'react-bootstrap-table2-paginator'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter'\r\n\r\nconst Data = () => {\r\n\r\n    const [coins, setCoins] = useState([])\r\n    const [modalInfo, setModalInfo] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    const [show, setShow] = useState(false)\r\n    const handleClose = () => setShow(false)\r\n    const handleShow = () => setShow(true)\r\n\r\n\r\n    const getCoinData = async () => {\r\n        try {\r\n            const data = await axios.get('https://api.coinpaprika.com/v1/tickers')\r\n            console.log(data.data)\r\n            setCoins(data.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCoinData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {dataField: \"rank\", text: \"Rank\", sort: true, headerStyle: () => {return { width: \"60px\" }}, align: 'right' },\r\n        {dataField: \"name\", filter: textFilter({placeholder: 'Enter Coin Name'})},\r\n        {dataField: \"symbol\", text: \"Symbol\", headerStyle: () => {return { width: \"125px\" }}},\r\n        {dataField: \"quotes.USD.price\", text: \"Price\", align: 'right'},\r\n        {dataField: \"quotes.USD.percent_change_24h\", text: \"Price 24h %\", sort: true, align: 'right'},\r\n        {dataField: \"quotes.USD.market_cap\", text: \"Marketcap\", sort: true, align: 'right'}\r\n    ]\r\n\r\n    const rowEvents = {\r\n        onClick: (e, row) => {\r\n            console.log(row)\r\n            setModalInfo(row)\r\n            toggleTrueFalse()\r\n        }\r\n    }\r\n\r\n\r\n    const toggleTrueFalse = () => {\r\n        setShowModal(handleShow)\r\n    }\r\n\r\n    \r\n\r\n\tconst defaultSorted = [{\r\n\t\tdataField: 'quotes.USD.market_cap',\r\n\t\torder: 'desc'\r\n      }];\r\n      \r\n    const rowStyle2 = (row, rowIndex) => {\r\n        const style = {};\r\n        if (row.quotes.USD.percent_change_24h > 0) {\r\n            style.background = '#f0fff0';\r\n        } else if (row.quotes.USD.percent_change_24h < 0) {\r\n            style.background = '#fff0f0';\r\n        } else {\r\n            style.background = 'white'\r\n        }\r\n        \r\n        return style;\r\n    };\r\n\r\n    const ModalContent = () => {\r\n        return (\r\n            <Modal show={show} onHide={handleClose}>\r\n\r\n                <Modal.Header closeButton  style={modalInfo.quotes.USD.percent_change_24h > 0 ? {background:'#f0fff0'} : {background:'#fff0f0'}}>\r\n                    <Modal.Title>{modalInfo.name}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    <ul>\r\n                        <ol>beta value:<br/> {modalInfo.beta_value}</ol><br/>\r\n                        <ol>circulating supply:<br/> {modalInfo.circulating_supply}</ol><br/>\r\n                        <ol>last updated:<br/> {modalInfo.last_updated}</ol><br/>\r\n                        <ol>max_supply:<br/> {modalInfo.max_supply}</ol><br/>\r\n                        <ol>rank:<br/> {modalInfo.rank}</ol><br/>\r\n                        <ol>symbol:<br/> {modalInfo.symbol}</ol><br/>\r\n                        <ol>total supply:<br/> {modalInfo.total_supply}</ol>\r\n                    </ul>\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{minHeight:'40vh', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center', width:'1005'}}>\r\n                <h2>SEARCH COINS</h2>\r\n                <p>click on coin for more info</p>   \r\n            </div>\r\n\r\n            <BootStrapTable \r\n                keyField=\"name\"\r\n                data={coins}\r\n                columns={columns}\r\n                pagination={paginationFactory()}\r\n                rowEvents={rowEvents}\r\n                defaultSorted={ defaultSorted }\r\n                filter={ filterFactory() }\r\n                rowStyle={ rowStyle2 }\r\n            />\r\n\r\n            { show ? <ModalContent /> : null }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Data\r\n","import React from 'react';\nimport './App.css';\nimport Data from './components/Data'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Data />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}